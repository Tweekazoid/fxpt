import os

import maya.cmds as m
import maya.OpenMaya as om

from fxpt.fx_textureManager.com import cleanupPath


# noinspection PySetFunctionToLiteral
IGNORED_API_TYPES = set([
    om.MFn.kShaderList,
    om.MFn.kTextureList
])

# noinspection PySetFunctionToLiteral
IGNORED_API_TYPES2 = set([
    'kShaderList',
    'kTextureList'
])


def getNodeName(mObj):
    mFnDependNode = om.MFnDependencyNode()
    mFnDependNode.setObject(mObj)
    return mFnDependNode.name()


def getConnections(mObj, dest, src):
    # print
    # print '>>>', getNodeName(mObj)

    outConnections = set()

    depNodeFn = om.MFnDependencyNode()
    depNodeFn.setObject(mObj)
    srcPlugs = om.MPlugArray()
    depNodeFn.getConnections(srcPlugs)

    destPlugs = om.MPlugArray()
    for i in range(srcPlugs.length()):
        # print srcPlugs[i].name()
        srcPlugs[i].connectedTo(destPlugs, dest, src)
        for j in range(destPlugs.length()):
            # plug = destPlugs[j]
            node = destPlugs[j].node()
            if node.apiType() not in IGNORED_API_TYPES:
                outConnections.add(node)

    return outConnections


#TODO: getShadingGroups very slow on big scenes because of listConnections. The problem arise during harvesting.
def getShadingGroups(mObj, visited):
    # print '>>>', getNodeName(mObj)

    sgs = set()
    visited.add(getNodeName(mObj))

    mFnDependNode = om.MFnDependencyNode()

    outConnections = getConnections(mObj, dest=False, src=True)
    if outConnections:
        for destMObj in outConnections:
            if getNodeName(destMObj) not in visited:
                if destMObj.apiType() == om.MFn.kShadingEngine:
                    mFnDependNode.setObject(destMObj)
                    sgs.add(mFnDependNode.name())
                else:
                    sgs.update(getShadingGroups(destMObj, visited))

    return sgs


def getShadingGroupsOLD(node, visited):
    sgs = set()
    visited.add(node)
    outConnections = m.listConnections(node, s=False, d=True)
    if outConnections:
        for destinationNode in outConnections:
            if destinationNode not in visited:
                if m.nodeType(destinationNode, apiType=True) in IGNORED_API_TYPES2:
                    visited.add(destinationNode)
                    continue
                if m.objectType(destinationNode, isType='shadingEngine'):
                    sgs.add(destinationNode)
                else:
                    sgs.update(getShadingGroupsOLD(destinationNode, visited))
    return sgs


class TexNode(object):

    def __init__(self, node, attr):
        self.node = None
        self.attr = None
        self.sgs = None

        self.setNode(node)
        self.setAttr(attr)
        self.setSgs()

    def __str__(self):
        return 'TexNode: {}'.format(self.getFullAttrName())

    def setNode(self, node):
        self.node = node

    def getNode(self):
        return self.node

    def setAttr(self, attr):
        self.attr = attr

    def getAttr(self):
        return self.attr

    def setSgs(self):
        self.sgs = getShadingGroupsOLD(self.node, set())

    def setSgs(self):
        selList = om.MSelectionList()
        selList.add(self.node)
        mObj = om.MObject()
        selList.getDependNode(0, mObj)
        self.sgs = getShadingGroups(mObj, set())
        # print self.sgs

    def getSgsOld(self):
        return self.sgs

    def isAssigned(self):
        for sg in self.sgs:
            if m.sets(sg, q=True):
                return True
        return False

    def getFullAttrName(self):
        return '{}.{}'.format(self.node, self.attr)

    def getAttrValue(self):
        slashedPath = cleanupPath(m.getAttr(self.getFullAttrName()))
        if slashedPath.startswith('//'):
            return '//{}'.format(slashedPath[2:].replace('//', '/'))
        else:
            return slashedPath.replace('//', '/')

    def setAttrValue(self, value):
        m.setAttr(self.getFullAttrName(), value, typ='string')

    def nodeAttrExists(self):
        return m.objExists(self.getFullAttrName())

    def fileExists(self):
        fullPath = os.path.expandvars(self.getAttrValue())
        if os.path.basename(fullPath):
            return os.path.exists(fullPath)
        else:
            return False
